[{"title":"你好世界","path":"/2024/03/06/你好世界/","content":"#题解 #线性dp 描述你驾驶出租车行驶在一条有 n 个地点的路上。这 n 个地点从近到远编号为 1 到 n ，你想要从 1 开到 n ，通过接乘客订单盈利。你只能沿着编号递增的方向前进，不能改变方向。 乘客信息用一个下标从 0 开始的二维数组 rides 表示，其中 rides[i] = [starti, endi, tipi] 表示第 i 位乘客需要从地点 starti 前往 endi ，愿意支付 tipi 元的小费。 每一位 你选择接单的乘客 i ，你可以 盈利 endi - starti + tipi 元。你同时 最多 只能接一个订单。 给你 n 和 rides ，请你返回在最优接单方案下，你能盈利 最多 多少元。 注意：你可以在一个地点放下一位乘客，并在同一个地点接上另一位乘客。 思路令f[y]为到达 y点得到的最大收益 则f[y] = max(f[x1] + earning(x1, y), f[x2] + earning(x2, y), ..., f[xn] + earning(xn, y))其中每个x为能达到y点的地点编号 因为车是一直往前开的 所以不一定是按照订单 开到y点获得的收益最大所以还要和 f[y - 1]比较 f[y] = max(f[y], f[y - 1]。 代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263func maxTaxiEarnings(n int, rides [][]int) int64 &#123; f := make([]int, n+1) m := map[int][]int&#123;&#125; for i, ride := range rides &#123; end := ride[1] m[end] = append(m[end], i) &#125; ret := 0 for i := 1; i &lt;= n; i++ &#123; f[i] = f[i - 1] if _, has := m[i]; has &#123; for _, j := range m[i] &#123; start := rides[j][0] fee := rides[j][2] f[i] = max(f[i], f[start] + i-start + fee) &#125; &#125; ret = max(f[i] , ret) &#125; return int64(ret) &#125; func max(a, b int) int &#123; if a &gt; b &#123; return a &#125; return b&#125; 知识点（感悟） 相似题"},{"title":"Hello World","path":"/2024/03/06/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]